{"project": "hangar", "project_url": "https://hangar-py.readthedocs.io", "show_commit_url": "http://github.com/tensorwerk/hangar-py/commit/", "hash_length": 8, "revision_to_hash": {"0": "2aff3805c66083a7fbb2ebf701ceaf38ac5165c7", "139": "8a6ec27d7d61500c3967f756dd06484c4efca9f2", "142": "019fffcaa2b57889c221f50fafa26319a8021ec8", "342": "a47aaf0ab69333e5d2629b231e0f9b4ca835c801", "346": "a51509eaac61827191c66709d7c894dc19784f9c", "355": "3604f1bda699256468c1037ae4649b6d7aab3cf4", "361": "83598534267e2b77e61a53248979994b172a2dec", "367": "b13a73c0c281488b6bd5333660b9ddc1f7f697ba", "370": "63bac609e31d4aa09948c4b979f3d98d754643f6", "377": "ecc354a769946738cc7ab54d8e66927cde1fae25", "384": "15884b42370ab8bef04e74db9cf087f7a3983dfd", "393": "c64f32fb1ac7825ba82588fb87de51a29e581fdd", "396": "d337bec48adc025a63b88958a4aef15792bd4182", "398": "1b84c87629f44bc9afb8613921ba5e700f436fae", "401": "abf431e03ae1483248f19873667e204890ae0786", "402": "84417d5e126208ab0f81a4dab9327abde0cd0dbf", "407": "46b727183f15537e920c1420e3c37cd8827d8b03", "409": "e2c7a89ccb9ddb379e8a3fa8f20dae20fcfb6345", "416": "b399241512a7329ed5d25d27f1f9787f01052cd3", "419": "857cc52d1ceedd2f1b08a51a36b4c758cd6d7a04", "422": "e1b05834b624da030cc91ea0253d72afb65ee73b", "426": "03b872fee2596c3dfd5fbeea3407b9ca3774b784", "435": "e7d2e120672786895c8b34f5dd14750f6388f714", "440": "9d66727a46e67f2a2e18549e67606497c96c9be5", "443": "f1c5d050671fc79371cc6bc31c70303a155e627c", "446": "14d9d50e07e4a445a28311cb8bbd7cf303ce0fd5", "452": "f43faaa496eb9f9f1f75fc84f270150eab168ab4", "454": "209fdef67923649a7f6233ffc600b98adfe96eb1", "463": "1442eea41f73fc1fbf983c6563d3c847467db316", "468": "8d9515bccde2b6caebf26e1d2d9e6fbd427f765f", "485": "f4881b87103a29df61374149031b29a6543baad3", "490": "b2c00161bf33118669cc7af883b5e41c86c715ff", "498": "1d932c8745e9366aa207f0ccaea0f22b925d334e", "504": "a2887b3faad985276b0e05a536ae56eaa77367f1", "520": "660ecfeb00ac4f6ce6f7bea371023428e9ed71b3", "526": "d105e56256e44be3eb3d4b9ec7004a450f706259", "533": "2ed115779641578a6348f14dab38250c0d30933c", "535": "880dd0649fe395bd797e3a582fa8089599a74ff5", "540": "730dac6cb968a9dbd4bc88fdece18cab34f1de7f", "545": "b658fd26266a1b0c05577e6a1900c24ee683fccc", "548": "ede040cce6a47df57ac6802203c799164ddd7028", "551": "be7d40e37edaaf73d34361915e4198da019665e0", "560": "90db078539419d7238b788269699e3e86a8ee8aa", "567": "5770f5ae3eb4be7d08be213d3397c715f833856e", "569": "d267c0a57f54f507bcb8a5c38e76df70a5162137", "578": "519d63b278a35367a89dbb9f49bd39f29c725e81", "582": "6891dd3197f5a53e507910e42324900d94056759", "585": "fe746ab087c93629846bbd2c4a2753a132861e08", "610": "698a792a461f436aef7a2451dfd8b5c53954d028", "645": "fc68f58d7580ba4412ace322917e0cf38ede6446", "647": "b54b77272a000c735ed4f9c8e57ce83762737094", "656": "27c66f7585098ac325951e5aba9f2f179a72c512", "667": "b277b1191f9e87e5f3e6cdb514d618a1cd232fbc", "673": "84bec738b57d64b008476649f539abfb259590d8", "676": "f66d10639d37bbae016f090ccaa5e6586595186f", "680": "fae9052b82ea60667aece0624792ce451fabafae", "683": "e1bb0e81fb87cb367d6a1d1eacfcf1630e867242", "687": "01c94bd0a8bf7cba0f61770afcad3d8d665b6fef", "691": "44e94918612fbd69ce19624f9c93517ec8aa0262", "693": "15761c84a61a4121f687fddfa3e200a4f9f4bc2b", "698": "9bbe52a329c0029be2f9b6aa754bf40a8d736bd7", "705": "a2c3f84cedf62fed82d50066f270809d957f51c0", "709": "9d91d7cbf01dc123a0759802e084a8990b1f6979", "710": "82b4c5600d5ac72f5b961304a5ec0450072d6290", "711": "88922c7b4781fef04e3a10ec7a93336b4facbb9f", "722": "c1cfa2f8f997d7d0f114e015aea333829e029451", "724": "e3c88ca5e877e7df307f815482d00d700ab80a6a", "732": "8947c5a12ad488cd24a420950016a33d034098e8", "735": "6cab428b3aad941d335e239416d68cac4108dad0"}, "revision_to_date": {"0": 1555382024000, "139": 1558720290000, "142": 1558721999000, "342": 1565381467000, "346": 1566238301000, "355": 1566245193000, "361": 1567579244000, "367": 1567588184000, "370": 1567590285000, "377": 1567768312000, "384": 1567770911000, "393": 1568099763000, "396": 1568101534000, "398": 1570029459000, "401": 1570067082000, "402": 1570508591000, "407": 1570513763000, "409": 1570518622000, "416": 1571113121000, "419": 1571119813000, "422": 1571123217000, "426": 1571198043000, "435": 1571241780000, "440": 1571429472000, "443": 1571449813000, "446": 1571662207000, "452": 1571691429000, "454": 1571692878000, "463": 1571944065000, "468": 1572114049000, "485": 1572382325000, "490": 1572396460000, "498": 1573132275000, "504": 1573201749000, "520": 1573484638000, "526": 1573488546000, "533": 1574342069000, "535": 1574348370000, "540": 1574362011000, "545": 1574744153000, "548": 1574748675000, "551": 1574751598000, "560": 1575482876000, "567": 1575509361000, "569": 1575522645000, "578": 1575971145000, "582": 1576069747000, "585": 1578014110000, "610": 1580806696000, "645": 1583333472000, "647": 1583341944000, "656": 1583570025000, "667": 1585666900000, "673": 1585976738000, "676": 1585983765000, "680": 1585991897000, "683": 1585994188000, "687": 1585999998000, "691": 1586188398000, "693": 1586189019000, "698": 1586499542000, "705": 1588254149000, "709": 1588960806000, "710": 1588961512000, "711": 1588961959000, "722": 1590583145000, "724": 1595015671000, "732": 1596289514000, "735": 1596302390000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz"], "machine": ["Richards-MBP"], "num_cpu": ["8"], "os": ["Darwin 18.7.0", "Darwin 19.2.0"], "ram": ["17179869184"], "python": ["3.7"], "Cython": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz", "machine": "Richards-MBP", "num_cpu": "8", "os": "Darwin 19.2.0", "ram": "17179869184", "python": "3.7", "Cython": "", "branch": "master"}], "benchmarks": {"backend_comparisons.Read_50by50by10_3000_samples.time_read": {"code": "class _ReaderSuite:\n    def read(self, backend):\n        with self.aset as cm_aset:\n            for i in cm_aset.keys():\n                arr = cm_aset[i]\n\n    def setup(self, backend):\n        self.repo = Repository(path=os.getcwd(), exists=True)\n        self.co = self.repo.checkout(write=False)\n        try:\n            try:\n                self.aset = self.co.columns[backend]\n            except AttributeError:\n                self.aset = self.co.arraysets[backend]\n        except KeyError:\n            raise NotImplementedError\n\n    def setup_cache(self):\n    \n        backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00',\n            'hdf5_01': '01',\n        }\n    \n        sample_shape = (50, 50, 10)\n        num_samples = 3_000\n    \n        repo = Repository(path=os.getcwd(), exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(sample_shape)\n        for idx, shape in enumerate(sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        for backend, code in backend_code.items():\n            try:\n                co.arraysets.init_arrayset(\n                    backend, prototype=arr, backend_opts=code)\n            except TypeError:\n                try:\n                    co.arraysets.init_arrayset(\n                        backend, prototype=arr, backend=code)\n                except ValueError:\n                    pass\n            except ValueError:\n                pass\n            except AttributeError:\n                co.add_ndarray_column(backend, prototype=arr, backend=code)\n    \n        try:\n            col = co.columns\n        except AttributeError:\n            col = co.arraysets\n    \n        with col as asets_cm:\n            for aset in asets_cm.values():\n                changer = 0\n                for i in range(num_samples):\n                    arr[changer, changer, changer] += 1\n                    aset[i] = arr\n                changer += 1\n        co.commit('first commit')\n        co.close()\n        repo._env._close_environments()", "min_run_count": 2, "name": "backend_comparisons.Read_50by50by10_3000_samples.time_read", "number": 3, "param_names": ["backend"], "params": [["'hdf5_00'", "'hdf5_01'", "'numpy_10'"]], "rounds": 2, "sample_time": 0.01, "setup_cache_key": "backend_comparisons:104", "timeout": 60, "type": "time", "unit": "seconds", "version": "5f12c0301b7ef54e613bebd7540f8b458055f8bde554a3c1b46ee4ec76bb64e6", "warmup_time": 0}, "backend_comparisons.Write_50by50by20_300_samples.time_write": {"code": "class _WriterSuite:\n    def write(self, backend):\n        arr = self.arr\n        iter_number = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_number, iter_number, iter_number] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self, backend):\n    \n        # self.method\n        self.current_iter_number = 0\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00',\n            'hdf5_01': '01',\n        }\n        # self.num_samples\n    \n        self.sample_shape = (50, 50, 20)\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        self.arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=self.arr, backend_opts=self.backend_code[backend])\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset(\n                    'aset', prototype=self.arr, backend=self.backend_code[backend])\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column(\n                'aset', prototype=self.arr, backend=self.backend_code[backend])", "min_run_count": 2, "name": "backend_comparisons.Write_50by50by20_300_samples.time_write", "number": 2, "param_names": ["backend"], "params": [["'hdf5_00'", "'hdf5_01'", "'numpy_10'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "abcd695cdbfc50a26ae005d7f7c2c4b673dbbfc9d95ced237378fd2ee4b75111", "warmup_time": 0}, "backends.hdf5_00.Read_50by50by10_100_samples.time_read": {"code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_00.Read_50by50by10_100_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a", "warmup_time": 0}, "backends.hdf5_00.Read_50by50by10_1_samples.time_read": {"code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_00.Read_50by50by10_1_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a", "warmup_time": 0}, "backends.hdf5_00.Read_50by50by10_300_samples.time_read": {"code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_00.Read_50by50by10_300_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a", "warmup_time": 0}, "backends.hdf5_00.Read_50by50by10_300_samples.track_repo_size": {"code": "class _WriterSuite_HDF5_00:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "name": "backends.hdf5_00.Read_50by50by10_300_samples.track_repo_size", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "bytes", "version": "b2443ca79bc698eb139c0e830dff99586c25a2caee05f7e695309fadb44b4a1d"}, "backends.hdf5_00.Write_50by50by10_100_samples.time_write": {"code": "class _WriterSuite_HDF5_00:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_00.Write_50by50by10_100_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "13be3f8f543972b97e53b1ade23b66c4fb01427218576e2addf06acb1b41f05d", "warmup_time": 0}, "backends.hdf5_00.Write_50by50by10_1_samples.time_write": {"code": "class _WriterSuite_HDF5_00:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_00.Write_50by50by10_1_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "13be3f8f543972b97e53b1ade23b66c4fb01427218576e2addf06acb1b41f05d", "warmup_time": 0}, "backends.hdf5_01.Read_50by50by10_100_samples.time_read": {"code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_01.Read_50by50by10_100_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec", "warmup_time": 0}, "backends.hdf5_01.Read_50by50by10_1_samples.time_read": {"code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_01.Read_50by50by10_1_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec", "warmup_time": 0}, "backends.hdf5_01.Read_50by50by10_300_samples.time_read": {"code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_01.Read_50by50by10_300_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec", "warmup_time": 0}, "backends.hdf5_01.Read_50by50by10_300_samples.track_repo_size": {"code": "class _WriterSuite_HDF5_01:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "name": "backends.hdf5_01.Read_50by50by10_300_samples.track_repo_size", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "bytes", "version": "db391022ad86a2b4c389a19038c55d1339ed924f9bb81b12c8337f8627d2052c"}, "backends.hdf5_01.Write_50by50by10_100_samples.time_write": {"code": "class _WriterSuite_HDF5_01:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_01.Write_50by50by10_100_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5e8aa1ef890d712018820ee55a01b58c2399fbb09ed892420b2de29ab68cc27b", "warmup_time": 0}, "backends.hdf5_01.Write_50by50by10_1_samples.time_write": {"code": "class _WriterSuite_HDF5_01:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.hdf5_01.Write_50by50by10_1_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5e8aa1ef890d712018820ee55a01b58c2399fbb09ed892420b2de29ab68cc27b", "warmup_time": 0}, "backends.numpy_10.Read_50by50by10_100_samples.time_read": {"code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.numpy_10.Read_50by50by10_100_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820", "warmup_time": 0}, "backends.numpy_10.Read_50by50by10_1_samples.time_read": {"code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.numpy_10.Read_50by50by10_1_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820", "warmup_time": 0}, "backends.numpy_10.Read_50by50by10_300_samples.time_read": {"code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.numpy_10.Read_50by50by10_300_samples.time_read", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820", "warmup_time": 0}, "backends.numpy_10.Read_50by50by10_300_samples.track_repo_size": {"code": "class _WriterSuite_NUMPY_10:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "name": "backends.numpy_10.Read_50by50by10_300_samples.track_repo_size", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "bytes", "version": "85cf2d17b5c6a33ecdf6d27c58cdc8243bc2954fd3cc5066fd6cd11febca0ad8"}, "backends.numpy_10.Write_50by50by10_100_samples.time_write": {"code": "class _WriterSuite_NUMPY_10:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.numpy_10.Write_50by50by10_100_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bde2766a8c5b67d2825fb199b670344290827c354ab714c5991727d3deda5e06", "warmup_time": 0}, "backends.numpy_10.Write_50by50by10_1_samples.time_write": {"code": "class _WriterSuite_NUMPY_10:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr", "min_run_count": 2, "name": "backends.numpy_10.Write_50by50by10_1_samples.time_write", "number": 2, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bde2766a8c5b67d2825fb199b670344290827c354ab714c5991727d3deda5e06", "warmup_time": 0}, "commit_and_checkout.CheckoutCommit.time_checkout_read_only": {"code": "class CheckoutCommit:\n    def time_checkout_read_only(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=False)\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None", "min_run_count": 2, "name": "commit_and_checkout.CheckoutCommit.time_checkout_read_only", "number": 1, "param_names": ["num_samples", "num_metadata"], "params": [["5000", "20000"], ["5000", "20000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c51b2b203f11f541678e9704bff447783ba076232bb82346eeb998069418987d", "warmup_time": 0}, "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled": {"code": "class CheckoutCommit:\n    def time_checkout_write_enabled(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=True)\n        self.co.close()\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None", "min_run_count": 2, "name": "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled", "number": 1, "param_names": ["num_samples", "num_metadata"], "params": [["5000", "20000"], ["5000", "20000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d2ae5dc41b7d02628f404248bf3c0409bfabbe67bfe646ef26fe880940c59e40", "warmup_time": 0}, "commit_and_checkout.MakeCommit.time_commit": {"code": "class MakeCommit:\n    def time_commit(self, num_samples, num_metadata):\n        self.co.commit('hello')\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'", "min_run_count": 2, "name": "commit_and_checkout.MakeCommit.time_commit", "number": 1, "param_names": ["num_samples", "num_metadata"], "params": [["5000", "20000"], ["5000", "20000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8b837cd05729f0dfe1b95de45308fa671fca2ac5f803908dcd15437b80eeb935", "warmup_time": 0}, "package.TimeImport.timeraw_import": {"code": "class TimeImport:\n    def timeraw_import(self):\n        return \"\"\"\n        from hangar import Repository\n        \"\"\"", "min_run_count": 2, "name": "package.TimeImport.timeraw_import", "number": 1, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9c9c6e1ea7c184cc661446cbcacf1737e0c01687dc6c425eb978e762fa83b812", "warmup_time": -1}}, "machines": {"Richards-MBP": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz", "machine": "Richards-MBP", "num_cpu": "8", "os": "Darwin 19.2.0", "ram": "17179869184", "version": 1}}, "tags": {"v0.0.0": 0, "v0.1.0": 139, "v0.1.1": 142, "v0.2.0": 342, "v0.3.0": 396, "v0.4.0": 551, "v0.4.0b0": 443, "v0.5.0": 687, "v0.5.0dev2": 680, "v0.5.0dev3": 683, "v0.5.1": 693, "v0.5.2": 711}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}