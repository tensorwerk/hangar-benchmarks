{
    "arrayset_data.HDF5_00_FLOAT32_Read_1000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_FLOAT32_Read_1000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_FLOAT32_Read_1000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.HDF5_00_FLOAT32_Read_1000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.HDF5_00_FLOAT32_Read_5000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_FLOAT32_Read_5000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_FLOAT32_Read_5000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.HDF5_00_FLOAT32_Read_5000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.HDF5_00_FLOAT32_Write_1000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_FLOAT32_Write_1000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_FLOAT32_Write_5000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_FLOAT32_Write_5000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_UINT16_Read_1000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_UINT16_Read_1000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_UINT16_Read_1000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.HDF5_00_UINT16_Read_1000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.HDF5_00_UINT16_Read_5000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_UINT16_Read_5000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_UINT16_Read_5000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.HDF5_00_UINT16_Read_5000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.HDF5_00_UINT16_Write_1000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_UINT16_Write_1000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.HDF5_00_UINT16_Write_5000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.HDF5_00_UINT16_Write_5000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_FLOAT32_Read_1000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_FLOAT32_Read_1000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_FLOAT32_Read_1000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.NUMPY_10_FLOAT32_Read_1000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.NUMPY_10_FLOAT32_Read_5000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_FLOAT32_Read_5000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_FLOAT32_Read_5000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.NUMPY_10_FLOAT32_Read_5000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.NUMPY_10_FLOAT32_Write_1000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_FLOAT32_Write_1000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_FLOAT32_Write_5000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_FLOAT32_Write_5000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_UINT16_Read_1000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_UINT16_Read_1000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_UINT16_Read_1000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.NUMPY_10_UINT16_Read_1000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.NUMPY_10_UINT16_Read_5000.time_read": {
        "code": "class _WriterSuite:\n    def read(self):\n        aset = self.co.arraysets['aset']\n        ks = list(aset.keys())\n        with aset as cm_aset:\n            for i in ks:\n                arr = cm_aset[i]\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_UINT16_Read_5000.time_read",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0376a469802174fa20ebc44654173adbaaf74332378ca9bd90dbf0ba8e5a115d",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_UINT16_Read_5000.track_repo_size": {
        "code": "class _WriterSuite:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "name": "arrayset_data.NUMPY_10_UINT16_Read_5000.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "6960b62137af29ba9bcf7fd6f3e20f82609acc70952c48e0133d0345b1ffddbe"
    },
    "arrayset_data.NUMPY_10_UINT16_Write_1000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_UINT16_Write_1000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "arrayset_data.NUMPY_10_UINT16_Write_5000.time_write": {
        "code": "class _WriterSuite:\n    def write(self):\n        arr = self.arr\n        aset = self.co.arraysets['aset']\n        with aset as cm_aset:\n            for i in range(self.num_samples):\n                arr += 1\n                cm_aset[i] = arr\n\n    def setup(self):\n    \n        # self.method\n        # self.backend\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00'\n        }\n        # self.dtype\n        self.type_code = {\n            'float32': np.float32,\n            'uint16': np.uint16,\n        }\n        # self.num_samples\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        a = np.hamming(100).reshape(100, 1)\n        b = np.hamming(100).reshape(1, 100)\n        c = np.round(a * b * 1000).astype(self.type_code[self.dtype])\n        arr = np.zeros((100, 100), dtype=c.dtype)\n        arr[:, :] = c\n    \n        try:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts=self.backend_code[self.backend])\n        except TypeError:\n            aset = co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend=self.backend_code[self.backend])\n        if self.method == 'read':\n            with aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr += 1\n                    cm_aset[i] = arr\n            co.commit('first commit')\n            co.close()\n            self.co = self.repo.checkout(write=False)\n        else:\n            self.arr = arr\n            self.co = co",
        "min_run_count": 2,
        "name": "arrayset_data.NUMPY_10_UINT16_Write_5000.time_write",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6467105a6b41983a055a099f2834775ec4b37844f24aa1563af89c059b6c96f1",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_read_only": {
        "code": "class CheckoutCommit:\n    def time_checkout_read_only(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=False)\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_read_only",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f1d7c20ba29c0211d45f4f99ec71177ab039f8b4be210e402acfc3450a5062f1",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled": {
        "code": "class CheckoutCommit:\n    def time_checkout_write_enabled(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=True)\n        self.co.close()\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c53d947a9bcc39438968da0849dfbe572ca93623af710b5ead8f9a838bd0b55f",
        "warmup_time": 0
    },
    "commit_and_checkout.MakeCommit.time_commit": {
        "code": "class MakeCommit:\n    def time_commit(self, num_samples, num_metadata):\n        self.co.commit('hello')\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'",
        "min_run_count": 2,
        "name": "commit_and_checkout.MakeCommit.time_commit",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6cbe179c79ba97750da0479f1d6151a9f40ee9f3df51ab8c30feacf93d14c500",
        "warmup_time": 0
    },
    "package.TimeImport.time_import": {
        "code": "class TimeImport:\n    def time_import(self):\n        if sys.version_info >= (3, 7):\n            # on py37+ we the \"-X importtime\" usage gives us a more precise\n            #  measurement of the import time we actually care about,\n            #  without the subprocess or interpreter overhead\n            cmd = [sys.executable, \"-X\", \"importtime\", \"-c\", \"import hangar\"]\n            p = subprocess.run(cmd, stderr=subprocess.PIPE)\n    \n            line = p.stderr.splitlines()[-1]\n            field = line.split(b\"|\")[-2].strip()\n            total = int(field)  # microseconds\n            return total\n    \n        cmd = [sys.executable, \"-c\", \"import hangar\"]\n        subprocess.run(cmd, stderr=subprocess.PIPE)",
        "min_run_count": 2,
        "name": "package.TimeImport.time_import",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "90bda1fe84972e4410749764c4df623d8858bfa92ada6507e859fc13cb08f894",
        "warmup_time": -1
    },
    "version": 2
}