{
    "backend_comparisons.Read_50by50by10_3000_samples.time_read": {
        "code": "class _ReaderSuite:\n    def read(self, backend):\n        with self.aset as cm_aset:\n            for i in cm_aset.keys():\n                arr = cm_aset[i]\n\n    def setup(self, backend):\n        self.repo = Repository(path=os.getcwd(), exists=True)\n        self.co = self.repo.checkout(write=False)\n        try:\n            try:\n                self.aset = self.co.columns[backend]\n            except AttributeError:\n                self.aset = self.co.arraysets[backend]\n        except KeyError:\n            raise NotImplementedError\n\n    def setup_cache(self):\n    \n        backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00',\n            'hdf5_01': '01',\n        }\n    \n        sample_shape = (50, 50, 10)\n        num_samples = 3_000\n    \n        repo = Repository(path=os.getcwd(), exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(sample_shape)\n        for idx, shape in enumerate(sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        for backend, code in backend_code.items():\n            try:\n                co.arraysets.init_arrayset(\n                    backend, prototype=arr, backend_opts=code)\n            except TypeError:\n                try:\n                    co.arraysets.init_arrayset(\n                        backend, prototype=arr, backend=code)\n                except ValueError:\n                    pass\n            except ValueError:\n                pass\n            except AttributeError:\n                co.add_ndarray_column(backend, prototype=arr, backend=code)\n    \n        try:\n            col = co.columns\n        except AttributeError:\n            col = co.arraysets\n    \n        with col as asets_cm:\n            for aset in asets_cm.values():\n                changer = 0\n                for i in range(num_samples):\n                    arr[changer, changer, changer] += 1\n                    aset[i] = arr\n                changer += 1\n        co.commit('first commit')\n        co.close()\n        repo._env._close_environments()",
        "min_run_count": 2,
        "name": "backend_comparisons.Read_50by50by10_3000_samples.time_read",
        "number": 3,
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'hdf5_01'",
                "'numpy_10'"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "setup_cache_key": "backend_comparisons:104",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "5f12c0301b7ef54e613bebd7540f8b458055f8bde554a3c1b46ee4ec76bb64e6",
        "warmup_time": 0
    },
    "backend_comparisons.Write_50by50by20_300_samples.time_write": {
        "code": "class _WriterSuite:\n    def write(self, backend):\n        arr = self.arr\n        iter_number = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_number, iter_number, iter_number] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self, backend):\n    \n        # self.method\n        self.current_iter_number = 0\n        self.backend_code = {\n            'numpy_10': '10',\n            'hdf5_00': '00',\n            'hdf5_01': '01',\n        }\n        # self.num_samples\n    \n        self.sample_shape = (50, 50, 20)\n    \n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        self.arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=self.arr, backend_opts=self.backend_code[backend])\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset(\n                    'aset', prototype=self.arr, backend=self.backend_code[backend])\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column(\n                'aset', prototype=self.arr, backend=self.backend_code[backend])",
        "min_run_count": 2,
        "name": "backend_comparisons.Write_50by50by20_300_samples.time_write",
        "number": 2,
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'hdf5_01'",
                "'numpy_10'"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "abcd695cdbfc50a26ae005d7f7c2c4b673dbbfc9d95ced237378fd2ee4b75111",
        "warmup_time": 0
    },
    "backends.hdf5_00.Read_50by50by10_100_samples.time_read": {
        "code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_00.Read_50by50by10_100_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a",
        "warmup_time": 0
    },
    "backends.hdf5_00.Read_50by50by10_1_samples.time_read": {
        "code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_00.Read_50by50by10_1_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a",
        "warmup_time": 0
    },
    "backends.hdf5_00.Read_50by50by10_300_samples.time_read": {
        "code": "class _WriterSuite_HDF5_00:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_00.Read_50by50by10_300_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1f4003a47302e1fa904c0a4f18589667c9947995bcabc8493417818142261d5a",
        "warmup_time": 0
    },
    "backends.hdf5_00.Read_50by50by10_300_samples.track_repo_size": {
        "code": "class _WriterSuite_HDF5_00:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "name": "backends.hdf5_00.Read_50by50by10_300_samples.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "b2443ca79bc698eb139c0e830dff99586c25a2caee05f7e695309fadb44b4a1d"
    },
    "backends.hdf5_00.Write_50by50by10_100_samples.time_write": {
        "code": "class _WriterSuite_HDF5_00:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_00.Write_50by50by10_100_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "13be3f8f543972b97e53b1ade23b66c4fb01427218576e2addf06acb1b41f05d",
        "warmup_time": 0
    },
    "backends.hdf5_00.Write_50by50by10_1_samples.time_write": {
        "code": "class _WriterSuite_HDF5_00:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='00')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='00')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='00')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_00.Write_50by50by10_1_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "13be3f8f543972b97e53b1ade23b66c4fb01427218576e2addf06acb1b41f05d",
        "warmup_time": 0
    },
    "backends.hdf5_01.Read_50by50by10_100_samples.time_read": {
        "code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_01.Read_50by50by10_100_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec",
        "warmup_time": 0
    },
    "backends.hdf5_01.Read_50by50by10_1_samples.time_read": {
        "code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_01.Read_50by50by10_1_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec",
        "warmup_time": 0
    },
    "backends.hdf5_01.Read_50by50by10_300_samples.time_read": {
        "code": "class _WriterSuite_HDF5_01:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_01.Read_50by50by10_300_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9deac55f612880d5594aef706fc5ee0c0795af973e84a249f5b2046700b210ec",
        "warmup_time": 0
    },
    "backends.hdf5_01.Read_50by50by10_300_samples.track_repo_size": {
        "code": "class _WriterSuite_HDF5_01:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "name": "backends.hdf5_01.Read_50by50by10_300_samples.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "db391022ad86a2b4c389a19038c55d1339ed924f9bb81b12c8337f8627d2052c"
    },
    "backends.hdf5_01.Write_50by50by10_100_samples.time_write": {
        "code": "class _WriterSuite_HDF5_01:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_01.Write_50by50by10_100_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5e8aa1ef890d712018820ee55a01b58c2399fbb09ed892420b2de29ab68cc27b",
        "warmup_time": 0
    },
    "backends.hdf5_01.Write_50by50by10_1_samples.time_write": {
        "code": "class _WriterSuite_HDF5_01:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='01')\n        except TypeError:\n            try:\n                self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='01')\n            except ValueError:\n                raise NotImplementedError\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='01')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.hdf5_01.Write_50by50by10_1_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5e8aa1ef890d712018820ee55a01b58c2399fbb09ed892420b2de29ab68cc27b",
        "warmup_time": 0
    },
    "backends.numpy_10.Read_50by50by10_100_samples.time_read": {
        "code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.numpy_10.Read_50by50by10_100_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820",
        "warmup_time": 0
    },
    "backends.numpy_10.Read_50by50by10_1_samples.time_read": {
        "code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.numpy_10.Read_50by50by10_1_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820",
        "warmup_time": 0
    },
    "backends.numpy_10.Read_50by50by10_300_samples.time_read": {
        "code": "class _WriterSuite_NUMPY_10:\n    def read(self):\n        with self.aset as cm_aset:\n            for k in cm_aset.keys():\n                arr = cm_aset[k]\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.numpy_10.Read_50by50by10_300_samples.time_read",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "63b8859578e4d16935c7128eda52f8651514354fbd509f53cae20ff10757d820",
        "warmup_time": 0
    },
    "backends.numpy_10.Read_50by50by10_300_samples.track_repo_size": {
        "code": "class _WriterSuite_NUMPY_10:\n    def size(self):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "name": "backends.numpy_10.Read_50by50by10_300_samples.track_repo_size",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "85cf2d17b5c6a33ecdf6d27c58cdc8243bc2954fd3cc5066fd6cd11febca0ad8"
    },
    "backends.numpy_10.Write_50by50by10_100_samples.time_write": {
        "code": "class _WriterSuite_NUMPY_10:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.numpy_10.Write_50by50by10_100_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bde2766a8c5b67d2825fb199b670344290827c354ab714c5991727d3deda5e06",
        "warmup_time": 0
    },
    "backends.numpy_10.Write_50by50by10_1_samples.time_write": {
        "code": "class _WriterSuite_NUMPY_10:\n    def write(self):\n        arr = self.arr\n        iter_num = self.current_iter_number\n        with self.aset as cm_aset:\n            for i in range(self.num_samples):\n                arr[iter_num, iter_num, iter_num] += 1\n                cm_aset[i] = arr\n        self.current_iter_number += 1\n\n    def setup(self):\n    \n        # self.method\n        # self.num_samples\n        # self.sample_shape\n        self.current_iter_number = 0\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        component_arrays = []\n        ndims = len(self.sample_shape)\n        for idx, shape in enumerate(self.sample_shape):\n            layout = [1 for i in range(ndims)]\n            layout[idx] = shape\n            component = np.hamming(shape).reshape(*layout) * 100\n            component_arrays.append(component.astype(np.float32))\n        arr = np.prod(component_arrays).astype(np.float32)\n    \n        try:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            self.aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except ValueError:\n            # marks as skipped benchmark for commits which do not have this backend.\n            raise NotImplementedError\n        except AttributeError:\n            self.aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        if self.method == 'read':\n            with self.aset as cm_aset:\n                for i in range(self.num_samples):\n                    arr[0, 0, 0] += 1\n                    cm_aset[i] = arr\n            self.co.commit('first commit')\n            self.co.close()\n            self.co = self.repo.checkout(write=False)\n            try:\n                self.aset = self.co.columns['aset']\n            except AttributeError:\n                self.aset = self.co.arraysets['aset']\n        else:\n            self.arr = arr",
        "min_run_count": 2,
        "name": "backends.numpy_10.Write_50by50by10_1_samples.time_write",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bde2766a8c5b67d2825fb199b670344290827c354ab714c5991727d3deda5e06",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_read_only": {
        "code": "class CheckoutCommit:\n    def time_checkout_read_only(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=False)\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_read_only",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c51b2b203f11f541678e9704bff447783ba076232bb82346eeb998069418987d",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled": {
        "code": "class CheckoutCommit:\n    def time_checkout_write_enabled(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=True)\n        self.co.close()\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d2ae5dc41b7d02628f404248bf3c0409bfabbe67bfe646ef26fe880940c59e40",
        "warmup_time": 0
    },
    "commit_and_checkout.MakeCommit.time_commit": {
        "code": "class MakeCommit:\n    def time_commit(self, num_samples, num_metadata):\n        self.co.commit('hello')\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset('aset', prototype=arr, backend='10')\n        except AttributeError:\n            aset = self.co.add_ndarray_column('aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'",
        "min_run_count": 2,
        "name": "commit_and_checkout.MakeCommit.time_commit",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "5000",
                "20000"
            ],
            [
                "5000",
                "20000"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8b837cd05729f0dfe1b95de45308fa671fca2ac5f803908dcd15437b80eeb935",
        "warmup_time": 0
    },
    "package.TimeImport.timeraw_import": {
        "code": "class TimeImport:\n    def timeraw_import(self):\n        return \"\"\"\n        from hangar import Repository\n        \"\"\"",
        "min_run_count": 2,
        "name": "package.TimeImport.timeraw_import",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9c9c6e1ea7c184cc661446cbcacf1737e0c01687dc6c425eb978e762fa83b812",
        "warmup_time": -1
    },
    "version": 2
}