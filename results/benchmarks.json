{
    "arrayset_sample_reads.FLOAT32_DType.time_read_5000_samples": {
        "code": "class FLOAT32_DType:\n    def time_read_5000_samples(self, backend):\n        aset = self.co.arraysets['aset_float']\n        with aset as cm_aset:\n            for i in range(5000):\n                arr = cm_aset[i]\n\n    def setup(self, backend):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        arrfloat[:, :] = cfloat\n    \n        backend_code = backend[-2:]\n        try:\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts=backend_code)\n        except TypeError:\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend=backend_code)\n        with aset_float as cm_aset_float:\n            for i in range(5000):\n                arrfloat += 1\n                cm_aset_float[i] = arrfloat\n        co.commit('first commit')\n        co.close()\n        self.co = self.repo.checkout(write=False)",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.FLOAT32_DType.time_read_5000_samples",
        "number": 2,
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'numpy_10'"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b6aab41ff50d8a4fc146242260ceffd73aac6adc02834d9580cff4f1f8012242",
        "warmup_time": 0
    },
    "arrayset_sample_reads.FLOAT32_DType.track_repo_size_5000_samples": {
        "code": "class FLOAT32_DType:\n    def track_repo_size_5000_samples(self, backend):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self, backend):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        arrfloat[:, :] = cfloat\n    \n        backend_code = backend[-2:]\n        try:\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts=backend_code)\n        except TypeError:\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend=backend_code)\n        with aset_float as cm_aset_float:\n            for i in range(5000):\n                arrfloat += 1\n                cm_aset_float[i] = arrfloat\n        co.commit('first commit')\n        co.close()\n        self.co = self.repo.checkout(write=False)",
        "name": "arrayset_sample_reads.FLOAT32_DType.track_repo_size_5000_samples",
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'numpy_10'"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "d348ac28224d4675bcbb34ed2708a7b06599511326dce84ac245a38b1e113f81"
    },
    "arrayset_sample_reads.UINT16_DType.time_read_5000_samples": {
        "code": "class UINT16_DType:\n    def time_read_5000_samples(self, backend):\n        aset = self.co.arraysets['aset_int']\n        with aset as cm_aset:\n            for i in range(5000):\n                arr = cm_aset[i]\n\n    def setup(self, backend):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((100, 100), dtype=cint.dtype)\n        arrint[:, :] = cint\n    \n        backend_code = backend[-2:]\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts=backend_code)\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend=backend_code)\n        with aset_int as cm_aset_int:\n            for i in range(5000):\n                arrint += 1\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()\n        self.co = self.repo.checkout(write=False)",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.UINT16_DType.time_read_5000_samples",
        "number": 2,
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'numpy_10'"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9d5973d7c4e4c2958dd1d8ee671be24408f3d7ef4deff983fe82b59b13610575",
        "warmup_time": 0
    },
    "arrayset_sample_reads.UINT16_DType.track_repo_size_5000_samples": {
        "code": "class UINT16_DType:\n    def track_repo_size_5000_samples(self, backend):\n        return folder_size(self.repo._env.repo_path, recurse=True)\n\n    def setup(self, backend):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((100, 100), dtype=cint.dtype)\n        arrint[:, :] = cint\n    \n        backend_code = backend[-2:]\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts=backend_code)\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend=backend_code)\n        with aset_int as cm_aset_int:\n            for i in range(5000):\n                arrint += 1\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()\n        self.co = self.repo.checkout(write=False)",
        "name": "arrayset_sample_reads.UINT16_DType.track_repo_size_5000_samples",
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'hdf5_00'",
                "'numpy_10'"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "a150b1affa692426196e1d59df96529eaab56371d38c9294fed1f1819c258786"
    },
    "arrayset_sample_writes.HDF5_00.time_add_float32_5000_samples": {
        "code": "class HDF5_00:\n    def time_add_float32_5000_samples(self):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            nsamp = len(cm_aset)\n            arr += nsamp\n            for i in range(5000):\n                cm_aset[i] = arr + i\n\n    def setup(self):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((100, 100), dtype=cint.dtype)\n        self.arrint[:, :] = cint\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        self.arrfloat[:, :] = cfloat\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.HDF5_00.time_add_float32_5000_samples",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a52778027f5ed4095e282b39a5f9693ef62a1b5d2ed592adabed6cce152f3cdf",
        "warmup_time": 0
    },
    "arrayset_sample_writes.HDF5_00.time_add_uint16_5000_samples": {
        "code": "class HDF5_00:\n    def time_add_uint16_5000_samples(self):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            nsamp = len(cm_aset)\n            arr += nsamp\n            for i in range(5000):\n                cm_aset[i] = arr + i\n\n    def setup(self):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((100, 100), dtype=cint.dtype)\n        self.arrint[:, :] = cint\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        self.arrfloat[:, :] = cfloat\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.HDF5_00.time_add_uint16_5000_samples",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9c8bffe12eef86f751e23bb96d599baf70900caa32ca21eabe24e30c61b70cfa",
        "warmup_time": 0
    },
    "arrayset_sample_writes.NUMPY_10.time_add_float32_5000_samples": {
        "code": "class NUMPY_10:\n    def time_add_float32_5000_samples(self):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            nsamp = len(cm_aset)\n            arr += nsamp\n            for i in range(5000):\n                cm_aset[i] = arr + i\n\n    def setup(self):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((100, 100), dtype=cint.dtype)\n        self.arrint[:, :] = cint\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        self.arrfloat[:, :] = cfloat\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.NUMPY_10.time_add_float32_5000_samples",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b0ac24dd7069d8e78c9423b6147e9aa3dc94baa7c7b4ed01b7a289d35e1ad735",
        "warmup_time": 0
    },
    "arrayset_sample_writes.NUMPY_10.time_add_uint16_5000_samples": {
        "code": "class NUMPY_10:\n    def time_add_uint16_5000_samples(self):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            nsamp = len(cm_aset)\n            arr += nsamp\n            for i in range(5000):\n                cm_aset[i] = arr + i\n\n    def setup(self):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(100).reshape(100, 1)\n        bint = np.hamming(100).reshape(1, 100)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((100, 100), dtype=cint.dtype)\n        self.arrint[:, :] = cint\n    \n        afloat = np.hamming(100).reshape(100, 1).astype(np.float32)\n        bfloat = np.hamming(100).reshape(1, 100).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((100, 100), dtype=cfloat.dtype)\n        self.arrfloat[:, :] = cfloat\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.NUMPY_10.time_add_uint16_5000_samples",
        "number": 2,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7855240879d613c487cb97967ad79ab3f459e614d0ccae4ee6e95196ffce895d",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_read_only": {
        "code": "class CheckoutCommit:\n    def time_checkout_read_only(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=False)\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_read_only",
        "number": 3,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "10000",
                "30000",
                "50000"
            ],
            [
                "10000",
                "30000",
                "50000"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f1d7c20ba29c0211d45f4f99ec71177ab039f8b4be210e402acfc3450a5062f1",
        "warmup_time": 0
    },
    "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled": {
        "code": "class CheckoutCommit:\n    def time_checkout_write_enabled(self, num_samples, num_metadata):\n        self.co = self.repo.checkout(write=True)\n        self.co.close()\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'\n        self.co.commit('first')\n        self.co.close()\n        self.co = None",
        "min_run_count": 2,
        "name": "commit_and_checkout.CheckoutCommit.time_checkout_write_enabled",
        "number": 3,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "10000",
                "30000",
                "50000"
            ],
            [
                "10000",
                "30000",
                "50000"
            ]
        ],
        "processes": 2,
        "repeat": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c53d947a9bcc39438968da0849dfbe572ca93623af710b5ead8f9a838bd0b55f",
        "warmup_time": 0
    },
    "commit_and_checkout.MakeCommit.time_commit": {
        "code": "class MakeCommit:\n    def time_commit(self, num_samples, num_metadata):\n        self.co.commit('hello')\n\n    def setup(self, num_samples, num_metadata):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n        arr = np.array([0,], dtype=np.uint8)\n        try:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend_opts='10')\n        except TypeError:\n            aset = self.co.arraysets.init_arrayset(\n                'aset', prototype=arr, backend='10')\n    \n        with aset as cm_aset:\n            for i in range(num_samples):\n                arr[:] = i % 255\n                cm_aset[i] = arr\n        with self.co.metadata as cm_meta:\n            for i in range(num_metadata):\n                cm_meta[i] = f'{i % 500} data'",
        "min_run_count": 2,
        "name": "commit_and_checkout.MakeCommit.time_commit",
        "number": 1,
        "param_names": [
            "num_samples",
            "num_metadata"
        ],
        "params": [
            [
                "10000",
                "30000",
                "50000"
            ],
            [
                "10000",
                "30000",
                "50000"
            ]
        ],
        "processes": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6cbe179c79ba97750da0479f1d6151a9f40ee9f3df51ab8c30feacf93d14c500",
        "warmup_time": 0
    },
    "package.TimeImport.time_import": {
        "code": "class TimeImport:\n    def time_import(self):\n        if sys.version_info >= (3, 7):\n            # on py37+ we the \"-X importtime\" usage gives us a more precise\n            #  measurement of the import time we actually care about,\n            #  without the subprocess or interpreter overhead\n            cmd = [sys.executable, \"-X\", \"importtime\", \"-c\", \"import hangar\"]\n            p = subprocess.run(cmd, stderr=subprocess.PIPE)\n    \n            line = p.stderr.splitlines()[-1]\n            field = line.split(b\"|\")[-2].strip()\n            total = int(field)  # microseconds\n            return total\n    \n        cmd = [sys.executable, \"-c\", \"import hangar\"]\n        subprocess.run(cmd, stderr=subprocess.PIPE)",
        "min_run_count": 2,
        "name": "package.TimeImport.time_import",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "90bda1fe84972e4410749764c4df623d8858bfa92ada6507e859fc13cb08f894",
        "warmup_time": -1
    },
    "version": 2
}