{
    "arrayset_sample_reads.HDF5_00.peakmem_read_float32_2000_samples": {
        "code": "class HDF5_00:\n    def peakmem_read_float32_2000_samples(self):\n        aset = self.co.arraysets['aset_float']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=True)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='00')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='00')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "name": "arrayset_sample_reads.HDF5_00.peakmem_read_float32_2000_samples",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:18",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a0fa1510bb68c02d0688014aae5453cf60012ba9d3c63c049d637cc6fdcbe335"
    },
    "arrayset_sample_reads.HDF5_00.peakmem_read_uint16_2000_samples": {
        "code": "class HDF5_00:\n    def peakmem_read_uint16_2000_samples(self):\n        aset = self.co.arraysets['aset_int']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=True)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='00')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='00')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "name": "arrayset_sample_reads.HDF5_00.peakmem_read_uint16_2000_samples",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:18",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ddb3ccdfbe128018f936cc2f2e52ca7cfe0265f21982d094a4baadca08dd39eb"
    },
    "arrayset_sample_reads.HDF5_00.time_read_float32_2000_samples": {
        "code": "class HDF5_00:\n    def time_read_float32_2000_samples(self):\n        aset = self.co.arraysets['aset_float']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=True)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='00')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='00')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.HDF5_00.time_read_float32_2000_samples",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "315bbcf9cf0e629f8d079df27617dc8dede0765058d2518ca32f479592b5817e",
        "warmup_time": 1e-08
    },
    "arrayset_sample_reads.HDF5_00.time_read_uint16_2000_samples": {
        "code": "class HDF5_00:\n    def time_read_uint16_2000_samples(self):\n        aset = self.co.arraysets['aset_int']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=True)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='00')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='00')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='00')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.HDF5_00.time_read_uint16_2000_samples",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "383fb05383ea65e1850e44396618ac23b027d989d6ae305779f85fdc9aa96988",
        "warmup_time": 1e-08
    },
    "arrayset_sample_reads.NUMPY_10.peakmem_read_float32_2000_samples": {
        "code": "class NUMPY_10:\n    def peakmem_read_float32_2000_samples(self):\n        aset = self.co.arraysets['aset_float']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='10')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='10')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "name": "arrayset_sample_reads.NUMPY_10.peakmem_read_float32_2000_samples",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:98",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "65bbfe2a3823c903fcec365a0d31420ce0241dfd1cb1732b333f2e9d6c07cb59"
    },
    "arrayset_sample_reads.NUMPY_10.peakmem_read_uint16_2000_samples": {
        "code": "class NUMPY_10:\n    def peakmem_read_uint16_2000_samples(self):\n        aset = self.co.arraysets['aset_int']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='10')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='10')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "name": "arrayset_sample_reads.NUMPY_10.peakmem_read_uint16_2000_samples",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:98",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "cf2482b0c27e1ccd3d194111a0827947a7af23b26e2bc3bc6bfdb7fffc38f7e4"
    },
    "arrayset_sample_reads.NUMPY_10.time_read_float32_2000_samples": {
        "code": "class NUMPY_10:\n    def time_read_float32_2000_samples(self):\n        aset = self.co.arraysets['aset_float']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='10')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='10')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.NUMPY_10.time_read_float32_2000_samples",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:98",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9ee6dd06ce20dd3335a16a89f961e9692435786920920858bb2aa2f88028e435",
        "warmup_time": 1e-08
    },
    "arrayset_sample_reads.NUMPY_10.time_read_uint16_2000_samples": {
        "code": "class NUMPY_10:\n    def time_read_uint16_2000_samples(self):\n        aset = self.co.arraysets['aset_int']\n        with aset as cm_aset:\n            for i in range(2_000):\n                arr = cm_aset[i]\n\n    def setup(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        self.co = repo.checkout(write=False)\n\n    def setup_cache(self):\n        tmpdir = getcwd()\n        repo = Repository(path=tmpdir, exists=False)\n        repo.init('tester', 'foo@test.bar', remove_old=True)\n        co = repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        arrint[:, :, 0] = cint\n        arrint[:, :, 1] = cint + 1\n        arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        arrfloat[:, :, 0] = cfloat\n        arrfloat[:, :, 1] = cfloat + 1\n        arrfloat[:, :, 2] = cfloat + 2\n        try:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend_opts='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend_opts='10')\n        except TypeError:\n            aset_int = co.arraysets.init_arrayset(\n                'aset_int', prototype=arrint, backend='10')\n            aset_float = co.arraysets.init_arrayset(\n                'aset_float', prototype=arrfloat, backend='10')\n        with aset_int as cm_aset_int, aset_float as cm_aset_float:\n            for i in range(2_000):\n                arrfloat += 1\n                arrint += 1\n                cm_aset_float[i] = arrfloat\n                cm_aset_int[i] = arrint\n        co.commit('first commit')\n        co.close()",
        "min_run_count": 2,
        "name": "arrayset_sample_reads.NUMPY_10.time_read_uint16_2000_samples",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "setup_cache_key": "/Users/rick/projects/tensorwerk/hangar/hangar-benchmarks/benchmarks/arrayset_sample_reads.py:98",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c9648fc6d54eb7d4fe8d0f40ff8019ae46b1ae7493d2ed7dc5477b577c975833",
        "warmup_time": 1e-08
    },
    "arrayset_sample_writes.HDF5_00.time_add_float32_samples": {
        "code": "class HDF5_00:\n    def time_add_float32_samples(self, num_samples):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.HDF5_00.time_add_float32_samples",
        "number": 1,
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0129867de160f18e3f32817c805f819b0262cf26de791ce65132b571c5637910",
        "warmup_time": 1e-06
    },
    "arrayset_sample_writes.HDF5_00.time_add_uint16_samples": {
        "code": "class HDF5_00:\n    def time_add_uint16_samples(self, num_samples):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.HDF5_00.time_add_uint16_samples",
        "number": 1,
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "27ce97b7a7590a0c95ed7120a030c68aaf14ab9c8ec2381e9d133e1db63dce77",
        "warmup_time": 1e-06
    },
    "arrayset_sample_writes.HDF5_00.track_repo_size_float32_samples": {
        "code": "class HDF5_00:\n    def track_repo_size_float32_samples(self, num_samples):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n        self.co.commit('first commit')\n        nbytes = folder_size(self.repo._env.repo_path, recurse=True)\n        return nbytes\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "name": "arrayset_sample_writes.HDF5_00.track_repo_size_float32_samples",
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "b4f7fcd2c363e0ed821fb49918fa5dc99486f68673164b71b2ac531aff54b042"
    },
    "arrayset_sample_writes.HDF5_00.track_repo_size_uint16_samples": {
        "code": "class HDF5_00:\n    def track_repo_size_uint16_samples(self, num_samples):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n        self.co.commit('first commit')\n        nbytes = folder_size(self.repo._env.repo_path, recurse=True)\n        return nbytes\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='00')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='00')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='00')",
        "name": "arrayset_sample_writes.HDF5_00.track_repo_size_uint16_samples",
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "10c3037acefb16dc38c11808bd09617d9c6432cc0c828eb107b4c0b4708318c6"
    },
    "arrayset_sample_writes.NUMPY_10.time_add_float32_samples": {
        "code": "class NUMPY_10:\n    def time_add_float32_samples(self, num_samples):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.NUMPY_10.time_add_float32_samples",
        "number": 1,
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "de3803a4b805739891ba412483fe76ca6e04dcef54f634b31009245e8126037b",
        "warmup_time": 1e-07
    },
    "arrayset_sample_writes.NUMPY_10.time_add_uint16_samples": {
        "code": "class NUMPY_10:\n    def time_add_uint16_samples(self, num_samples):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "min_run_count": 2,
        "name": "arrayset_sample_writes.NUMPY_10.time_add_uint16_samples",
        "number": 1,
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9bc6af97f5e4a68a38bcddb7cb7a035e7aab7cac0d195497e79af8e1ae63435e",
        "warmup_time": 1e-07
    },
    "arrayset_sample_writes.NUMPY_10.track_repo_size_float32_samples": {
        "code": "class NUMPY_10:\n    def track_repo_size_float32_samples(self, num_samples):\n        arr = np.copy(self.arrfloat)\n        with self.aset_float as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n        self.co.commit('first commit')\n        nbytes = folder_size(self.repo._env.repo_path, recurse=True)\n        return nbytes\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "name": "arrayset_sample_writes.NUMPY_10.track_repo_size_float32_samples",
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "70e01a43b778516e762ec1042b7b47914a2bc89033b97d249f36b948138d06ff"
    },
    "arrayset_sample_writes.NUMPY_10.track_repo_size_uint16_samples": {
        "code": "class NUMPY_10:\n    def track_repo_size_uint16_samples(self, num_samples):\n        arr = np.copy(self.arrint)\n        with self.aset_int as cm_aset:\n            for i in range(num_samples):\n                cm_aset[i] = arr + i\n        self.co.commit('first commit')\n        nbytes = folder_size(self.repo._env.repo_path, recurse=True)\n        return nbytes\n\n    def setup(self, num_samples):\n        self.tmpdir = mkdtemp()\n        self.repo = Repository(path=self.tmpdir, exists=False)\n        self.repo.init('tester', 'foo@test.bar', remove_old=True)\n        self.co = self.repo.checkout(write=True)\n    \n        aint = np.hamming(250).reshape(250, 1)\n        bint = np.hamming(250).reshape(1, 250)\n        cint = np.round(aint * bint * 1000).astype(np.uint16)\n        self.arrint = np.zeros((250, 250, 3), dtype=cint.dtype)\n        self.arrint[:, :, 0] = cint\n        self.arrint[:, :, 1] = cint + 1\n        self.arrint[:, :, 2] = cint + 2\n    \n        afloat = np.hamming(250).reshape(250, 1).astype(np.float32)\n        bfloat = np.hamming(250).reshape(1, 250).astype(np.float32)\n        cfloat = np.round(afloat * bfloat * 1000)\n        self.arrfloat = np.zeros((250, 250, 3), dtype=cfloat.dtype)\n        self.arrfloat[:, :, 0] = cfloat\n        self.arrfloat[:, :, 1] = cfloat + 1\n        self.arrfloat[:, :, 2] = cfloat + 2\n        try:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend_opts='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend_opts='10')\n        except TypeError:\n            self.aset_int = self.co.arraysets.init_arrayset(\n                'aset_int', prototype=self.arrint, backend='10')\n            self.aset_float = self.co.arraysets.init_arrayset(\n                'aset_float', prototype=self.arrfloat, backend='10')",
        "name": "arrayset_sample_writes.NUMPY_10.track_repo_size_uint16_samples",
        "param_names": [
            "num_samples"
        ],
        "params": [
            [
                "2000"
            ]
        ],
        "timeout": 60.0,
        "type": "track",
        "unit": "bytes",
        "version": "dc241990a9ff6cd85d6a9d97ec543295382bd1dc37c7fc977e1b7fcbf953b959"
    },
    "package.TimeImport.time_import": {
        "code": "class TimeImport:\n    def time_import(self):\n        if sys.version_info >= (3, 7):\n            # on py37+ we the \"-X importtime\" usage gives us a more precise\n            #  measurement of the import time we actually care about,\n            #  without the subprocess or interpreter overhead\n            cmd = [sys.executable, \"-X\", \"importtime\", \"-c\", \"import hangar\"]\n            p = subprocess.run(cmd, stderr=subprocess.PIPE)\n    \n            line = p.stderr.splitlines()[-1]\n            field = line.split(b\"|\")[-2].strip()\n            total = int(field)  # microseconds\n            return total\n    \n        cmd = [sys.executable, \"-c\", \"import hangar\"]\n        subprocess.run(cmd, stderr=subprocess.PIPE)",
        "min_run_count": 2,
        "name": "package.TimeImport.time_import",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "90bda1fe84972e4410749764c4df623d8858bfa92ada6507e859fc13cb08f894",
        "warmup_time": -1
    },
    "version": 2
}